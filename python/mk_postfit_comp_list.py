#!/usr/bin/env python

import cPickle
import glob
import os
import pprint
import operator
import sys

if len(sys.argv) < 2:
  sys.exit('ERROR need output file name')

name = sys.argv[1]

base_path = '/nfs/dust/cms/user/nowatsd/sFrameNew/RunII_76X_v1/CMSSW_7_6_3/src/UHH2/VLQToHiggsPairProd/NewSamples-76X-v1/FinalSelection-v25/BackgroundOnlyFitsCompared_minuit_adjust_3/BackgroundOnlyFit/'

channels = ['Combined', 'OnlyBH', 'OnlyBW']

files = dict((a, os.path.join(base_path+'BackgroundOnlyFit'+a, 'PostFit/_varial_infodata.pkl')) for a in channels)

dicts = dict((a, cPickle.load(open(b))) for a, b in files.iteritems())


param_lists = dict((a, b['cnv_post_fit_']['post_fit_items']) for a, b in dicts.iteritems())

# pprint.pprint(list((a, b) for a, b in param_lists))

param_dicts = dict((a, dict((par, vals) for par, vals in b)) for a, b in param_lists.iteritems())

chan_dict = {}
for chan, params in param_dicts.iteritems():
  for par, vals in params.iteritems():
    if par not in chan_dict:
      chan_dict[par] = dict({chan : vals})
    else:
      chan_dict[par].update({chan : vals})

# pprint.pprint(chan_dict)

with open(name, 'w') as f:
  f.write(''.join('{:>16s}'.format(a) for a in [' ']+channels))
  f.write('\n')
  for proc, chans in chan_dict.iteritems():
    f.write('{:16s}'.format(proc))
    for c in channels:
      if c not in chans:
        chans.update({c : (0, 0)})
    # sort_list = list((c, vals) for c, vals in chans.iteritems())
    # pprint.pprint(sort_list)
    sort_list = sorted(chans.items(), key=operator.itemgetter(0))
    # print 'SORTED'
    for _, vals in sort_list:
      val_str = '{:8.3f}{:8.3f}'.format(vals[0], vals[1])
      f.write(val_str.replace('0.000', '-----'))
    f.write('\n')




# [[('Diboson_rate', (0.002841996493539181, 1.0002454051614915)),
#   ('PDF', (-0.12048947289655146, 0.6548729648137914)),
#   ('QCD_rate', (0.2907071959147717, 0.9562969467219652)),
#   ('ScaleVar', (-0.269309005028911, 0.41911978387443893)),
#   ('SingleTop_rate', (0.2281334496741381, 1.0143654575564145)),
#   ('TTbar_rate', (0.7064908985235079, 0.7026385062644579)),
#   ('WJets_rate', (0.016873918036620306, 1.000386313839071)),
#   ('btag_bc', (0.32125029284274825, 0.39101815644070537)),
#   ('btag_udsg', (-0.141823180534978, 0.5353690600226846)),
#   ('ewk_control', (0.09778779548793848, 0.536124050748303)),
#   ('higgs_smear', (-0.0017845401406197468, 1.141383497102916)),
#   ('jec', (0.30866317521507936, 0.346455505967417)),
#   ('jer', (-0.654620474185617, 0.456863628865523)),
#   ('jmr', (-0.3914433747168695, 0.4806604675011189)),
#   ('jms', (-0.36040916735092915, 0.7338510160366841)),
#   ('jsf', (-0.3128105017228748, 0.37301075372931686)),
#   ('luminosity', (0.6560049197780541, 0.9767551182856341)),
#   ('pu', (-0.20163690078730848, 0.5592118998899313)),
#   ('q2', (0.2605584804788696, 0.1797326936885353)),
#   ('sfel_id', (0.07430658307492877, 0.986218305140047)),
#   ('sfel_iso', (0.14667339208703473, 0.9937259582961083)),
#   ('sfel_trg', (0.6267642305501135, 0.835835520585662)),
#   ('sfmu_id', (0.23289014100507122, 0.9700170086213097)),
#   ('sfmu_iso', (-0.009140311572732285, 0.9933201513296841)),
#   ('sfmu_trg', (0.08656092907145413, 0.8383074837499872)),
#   ('tau21', (-0.031500843843319644, 1.3266516991845545)),
#   ('top_control', (0.1567556891107648, 0.9855772938805498)),
#   ('toppt', (-0.438305161755091, 0.5777600234745485))],
#  [('PDF', (-0.09571517261160215, 0.6605245785941413)),
#   ('ScaleVar', (-0.13244567932102141, 0.43038182199037645)),
#   ('btag_bc', (0.11904469157307361, 0.5015845554817856)),
#   ('btag_udsg', (-0.3807306563580901, 0.6810715958813744)),
#   ('ewk_control', (0.385555013157934, 0.6248498084896204)),
#   ('jec', (0.2300379962543796, 0.354024974310501)),
#   ('jer', (-0.568520764147174, 0.4362703157325471)),
#   ('jmr', (-0.28505118915601135, 0.4697068440223401)),
#   ('jms', (-0.2526364557757908, 0.800163118454802)),
#   ('jsf', (-0.7699400659265473, 0.5627034801594996)),
#   ('luminosity', (0.4658019121795248, 1.001935624671641)),
#   ('pu', (-0.3257900846913636, 0.6030266389641461)),
#   ('q2', (-0.24717723858803534, 0.15182360146794224)),
#   ('sfel_id', (0.1374303286987057, 0.9943743033679403)),
#   ('sfel_iso', (0.1374303286987056, 0.9943743033679403)),
#   ('sfel_trg', (0.6739857076746933, 0.854622681385209)),
#   ('sfmu_id', (0.036798802089424126, 0.9939473968532427)),
#   ('sfmu_iso', (0.03679880208145719, 0.9939473960650792)),
#   ('sfmu_trg', (0.1801818934285593, 0.842553511006954)),
#   ('tau21', (0.04056402762570566, 1.279165752447617)),
#   ('top_control', (0.09708012268334429, 0.9833417304568961)),
#   ('toppt', (-0.3944884687744193, 0.6283330832839326))],
#  [('Diboson_rate', (0.0019079432030397877, 1.0001845772681037)),
#   ('PDF', (0.019717446951280193, 0.9935664217277707)),
#   ('QCD_rate', (0.28322748610419884, 0.9681421417010386)),
#   ('ScaleVar', (0.09455964594281671, 1.0144848493501546)),
#   ('SingleTop_rate', (0.1595919972141086, 1.0091412156237882)),
#   ('TTbar_rate', (0.627749942840576, 0.7254067572267857)),
#   ('WJets_rate', (0.01147425856555925, 1.000255429891939)),
#   ('btag_bc', (0.3491124177176085, 0.7924347929821735)),
#   ('btag_udsg', (0.04338178407211581, 0.7361212055506505)),
#   ('higgs_smear', (-0.008249190248842898, 1.1333545085921894)),
#   ('jec', (0.20833890558042947, 1.1681429076344128)),
#   ('jer', (-0.0730000957681862, 1.0079535264850206)),
#   ('jsf', (-0.14951137505701953, 0.362185571690868)),
#   ('luminosity', (0.24714382805496798, 0.9701453015267016)),
#   ('pu', (0.04708716814848487, 0.950593171285131)),
#   ('sfel_id', (-0.04024485128314282, 0.9891989362481632)),
#   ('sfel_trg', (-0.039353285406021364, 0.9613716107038203)),
#   ('sfmu_id', (0.16407504514239676, 0.971357442695117)),
#   ('sfmu_trg', (0.08912142413733401, 0.9919338639652792))]]